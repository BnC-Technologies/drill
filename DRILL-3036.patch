From f301fc13596b86b52a5a73f8ee18b0b19549ac82 Mon Sep 17 00:00:00 2001
From: AdamPD <adam@pharmadata.net.au>
Date: Tue, 12 May 2015 17:27:03 +1000
Subject: [PATCH] Allow Mongo plugin to pushdown filter with a project present

---
 .../store/mongo/MongoPushDownFilterForScan.java    | 93 ++++++++++++++++------
 .../drill/exec/store/mongo/MongoStoragePlugin.java |  2 +-
 2 files changed, 71 insertions(+), 24 deletions(-)

diff --git a/contrib/storage-mongo/src/main/java/org/apache/drill/exec/store/mongo/MongoPushDownFilterForScan.java b/contrib/storage-mongo/src/main/java/org/apache/drill/exec/store/mongo/MongoPushDownFilterForScan.java
index 4fd80bd..c7a5602 100644
--- a/contrib/storage-mongo/src/main/java/org/apache/drill/exec/store/mongo/MongoPushDownFilterForScan.java
+++ b/contrib/storage-mongo/src/main/java/org/apache/drill/exec/store/mongo/MongoPushDownFilterForScan.java
@@ -19,12 +19,15 @@ package org.apache.drill.exec.store.mongo;

 import java.io.IOException;

+import org.apache.calcite.plan.RelOptRuleOperand;
+import org.apache.calcite.plan.RelOptUtil;
 import org.apache.drill.common.exceptions.DrillRuntimeException;
 import org.apache.drill.common.expression.LogicalExpression;
 import org.apache.drill.exec.planner.logical.DrillOptiq;
 import org.apache.drill.exec.planner.logical.DrillParseContext;
 import org.apache.drill.exec.planner.logical.RelOptHelper;
 import org.apache.drill.exec.planner.physical.FilterPrel;
+import org.apache.drill.exec.planner.physical.ProjectPrel;
 import org.apache.drill.exec.planner.physical.ScanPrel;
 import org.apache.drill.exec.store.StoragePluginOptimizerRule;
 import org.apache.calcite.rel.RelNode;
@@ -35,22 +38,69 @@ import org.slf4j.LoggerFactory;

 import com.google.common.collect.ImmutableList;

-public class MongoPushDownFilterForScan extends StoragePluginOptimizerRule {
+public abstract class MongoPushDownFilterForScan extends StoragePluginOptimizerRule {
   private static final Logger logger = LoggerFactory
       .getLogger(MongoPushDownFilterForScan.class);
-  public static final StoragePluginOptimizerRule INSTANCE = new MongoPushDownFilterForScan();

-  private MongoPushDownFilterForScan() {
-    super(
-        RelOptHelper.some(FilterPrel.class, RelOptHelper.any(ScanPrel.class)),
-        "MongoPushDownFilterForScan");
+  public static final StoragePluginOptimizerRule getFilterOnProject(){
+    return new MongoPushDownFilterForScan(
+            RelOptHelper.some(FilterPrel.class, RelOptHelper.some(ProjectPrel.class, RelOptHelper.any(ScanPrel.class))),
+            "MongoPushDownFilterForScan:Filter_On_Project") {
+
+      @Override
+      public boolean matches(RelOptRuleCall call) {
+        final ScanPrel scan = call.rel(2);
+        if (scan.getGroupScan() instanceof MongoGroupScan) {
+          return super.matches(call);
+        }
+        return false;
+      }
+
+      @Override
+      public void onMatch(RelOptRuleCall call) {
+        final FilterPrel filterRel = call.rel(0);
+        final ProjectPrel projectRel = call.rel(1);
+        final ScanPrel scanRel = call.rel(2);
+        doOnMatch(call, filterRel, projectRel, scanRel);
+      };
+    };
   }

-  @Override
-  public void onMatch(RelOptRuleCall call) {
-    final ScanPrel scan = (ScanPrel) call.rel(1);
-    final FilterPrel filter = (FilterPrel) call.rel(0);
-    final RexNode condition = filter.getCondition();
+  public static final StoragePluginOptimizerRule getFilterOnScan(){
+    return new MongoPushDownFilterForScan(
+            RelOptHelper.some(FilterPrel.class, RelOptHelper.any(ScanPrel.class)),
+            "MongoPushDownFilterForScan:Filter_On_Scan") {
+
+      @Override
+      public boolean matches(RelOptRuleCall call) {
+        final ScanPrel scan = call.rel(1);
+        if (scan.getGroupScan() instanceof MongoGroupScan) {
+          return super.matches(call);
+        }
+        return false;
+      }
+
+      @Override
+      public void onMatch(RelOptRuleCall call) {
+        final FilterPrel filterRel = call.rel(0);
+        final ScanPrel scanRel = call.rel(1);
+        doOnMatch(call, filterRel, null, scanRel);
+      }
+    };
+  }
+
+  private MongoPushDownFilterForScan(RelOptRuleOperand operand, String id) {
+    super(operand, id);
+  }
+
+  protected void doOnMatch(RelOptRuleCall call, FilterPrel filter, ProjectPrel project, ScanPrel scan) {
+    RexNode condition = null;
+    if(project == null){
+      condition = filter.getCondition();
+    }else{
+      // get the filter as if it were below the projection.
+      condition = RelOptUtil.pushFilterPastProject(filter.getCondition(), project);
+    }

     MongoGroupScan groupScan = (MongoGroupScan) scan.getGroupScan();
     if (groupScan.isFilterPushedDown()) {
@@ -78,26 +128,23 @@ public class MongoPushDownFilterForScan extends StoragePluginOptimizerRule {

     final ScanPrel newScanPrel = ScanPrel.create(scan, filter.getTraitSet(),
         newGroupsScan, scan.getRowType());
+
+    RelNode inputPrel = newScanPrel;
+
+    if(project != null){
+      inputPrel = project.copy(project.getTraitSet(), ImmutableList.of(inputPrel));
+    }
+
     if (mongoFilterBuilder.isAllExpressionsConverted()) {
       /*
        * Since we could convert the entire filter condition expression into an
        * Mongo filter, we can eliminate the filter operator altogether.
        */
-      call.transformTo(newScanPrel);
+      call.transformTo(inputPrel);
     } else {
       call.transformTo(filter.copy(filter.getTraitSet(),
-          ImmutableList.of((RelNode) newScanPrel)));
+          ImmutableList.of(inputPrel)));
     }

   }
-
-  @Override
-  public boolean matches(RelOptRuleCall call) {
-    final ScanPrel scan = (ScanPrel) call.rel(1);
-    if (scan.getGroupScan() instanceof MongoGroupScan) {
-      return super.matches(call);
-    }
-    return false;
-  }
-
 }
diff --git a/contrib/storage-mongo/src/main/java/org/apache/drill/exec/store/mongo/MongoStoragePlugin.java b/contrib/storage-mongo/src/main/java/org/apache/drill/exec/store/mongo/MongoStoragePlugin.java
index 38bc91d..4249141 100644
--- a/contrib/storage-mongo/src/main/java/org/apache/drill/exec/store/mongo/MongoStoragePlugin.java
+++ b/contrib/storage-mongo/src/main/java/org/apache/drill/exec/store/mongo/MongoStoragePlugin.java
@@ -79,7 +79,7 @@ public class MongoStoragePlugin extends AbstractStoragePlugin {
   }

   public Set<StoragePluginOptimizerRule> getOptimizerRules() {
-    return ImmutableSet.of(MongoPushDownFilterForScan.INSTANCE);
+    return ImmutableSet.of(MongoPushDownFilterForScan.getFilterOnProject(), MongoPushDownFilterForScan.getFilterOnScan());
   }

 }
--
1.9.4.msysgit.2
